name: Docker build and push
on:
  push:
    branches:
      - '*'
      - '!renovate/**'
  workflow_dispatch:

jobs:
  build:
    name: docker build and push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Install buildx
        if: steps.check_remote_image_tag.outputs.remote_tag_exists != 'true'
        uses: docker/setup-buildx-action@v1
        id: buildx

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ${{ github.ref }}-${{ github.sha }}
            ${{ github.ref }}
            refs/head/master

      - name: Login to Docker Hub
        if: steps.check_remote_image_tag.outputs.remote_tag_exists != 'true'
        env:
          DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
          DOCKER_HUB_PASS: ${{ secrets.DOCKER_HUB_PASS }}
        run: docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASS

      - name: Set IMAGE_TAG
        run: |
          IMAGE_TAG=$(cat Dockerfile | awk '/FROM/{print $2}' | awk -F':v' '{print $2}')
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Push Docker Hub
        if: steps.check_remote_image_tag.outputs.remote_tag_exists != 'true'
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: |
            yasuoza/epgstation:latest
            yasuoza/epgstation:${{ env.IMAGE_TAG }}
          build-args: |
            IMAGE_TAG=${{ env.IMAGE_TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
